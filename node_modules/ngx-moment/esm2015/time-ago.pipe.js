/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */
import { Pipe, ChangeDetectorRef, NgZone } from '@angular/core';
import * as moment from 'moment';
/** @type {?} */
const momentConstructor = moment;
export class TimeAgoPipe {
    /**
     * @param {?} cdRef
     * @param {?} ngZone
     */
    constructor(cdRef, ngZone) {
        this.cdRef = cdRef;
        this.ngZone = ngZone;
    }
    /**
     * @param {?} value
     * @param {?=} omitSuffix
     * @return {?}
     */
    transform(value, omitSuffix) {
        if (this.hasChanged(value, omitSuffix)) {
            this.lastTime = this.getTime(value);
            this.lastValue = value;
            this.lastOmitSuffix = omitSuffix;
            this.lastLocale = this.getLocale(value);
            this.removeTimer();
            this.createTimer();
            this.lastText = momentConstructor(value).from(momentConstructor(), omitSuffix);
        }
        else {
            this.createTimer();
        }
        return this.lastText;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeTimer();
    }
    /**
     * @return {?}
     */
    createTimer() {
        if (this.currentTimer) {
            return;
        }
        /** @type {?} */
        const momentInstance = momentConstructor(this.lastValue);
        /** @type {?} */
        const timeToUpdate = this.getSecondsUntilUpdate(momentInstance) * 1000;
        this.currentTimer = this.ngZone.runOutsideAngular(() => {
            if (typeof window !== 'undefined') {
                return window.setTimeout(() => {
                    this.lastText = momentConstructor(this.lastValue).from(momentConstructor(), this.lastOmitSuffix);
                    this.currentTimer = null;
                    this.ngZone.run(() => this.cdRef.markForCheck());
                }, timeToUpdate);
            }
            else {
                return null;
            }
        });
    }
    /**
     * @return {?}
     */
    removeTimer() {
        if (this.currentTimer) {
            window.clearTimeout(this.currentTimer);
            this.currentTimer = null;
        }
    }
    /**
     * @param {?} momentInstance
     * @return {?}
     */
    getSecondsUntilUpdate(momentInstance) {
        /** @type {?} */
        const howOld = Math.abs(momentConstructor().diff(momentInstance, 'minute'));
        if (howOld < 1) {
            return 1;
        }
        else if (howOld < 60) {
            return 30;
        }
        else if (howOld < 180) {
            return 300;
        }
        else {
            return 3600;
        }
    }
    /**
     * @param {?} value
     * @param {?=} omitSuffix
     * @return {?}
     */
    hasChanged(value, omitSuffix) {
        return this.getTime(value) !== this.lastTime
            || this.getLocale(value) !== this.lastLocale
            || omitSuffix !== this.lastOmitSuffix;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    getTime(value) {
        if (moment.isDate(value)) {
            return value.getTime();
        }
        else if (moment.isMoment(value)) {
            return value.valueOf();
        }
        else {
            return momentConstructor(value).valueOf();
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    getLocale(value) {
        return moment.isMoment(value) ? value.locale() : null;
    }
}
TimeAgoPipe.decorators = [
    { type: Pipe, args: [{ name: 'amTimeAgo', pure: false },] }
];
/** @nocollapse */
TimeAgoPipe.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: NgZone }
];
if (false) {
    /** @type {?} */
    TimeAgoPipe.prototype.currentTimer;
    /** @type {?} */
    TimeAgoPipe.prototype.lastTime;
    /** @type {?} */
    TimeAgoPipe.prototype.lastValue;
    /** @type {?} */
    TimeAgoPipe.prototype.lastOmitSuffix;
    /** @type {?} */
    TimeAgoPipe.prototype.lastLocale;
    /** @type {?} */
    TimeAgoPipe.prototype.lastText;
    /** @type {?} */
    TimeAgoPipe.prototype.cdRef;
    /** @type {?} */
    TimeAgoPipe.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1hZ28ucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1tb21lbnQvIiwic291cmNlcyI6WyJ0aW1lLWFnby5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsT0FBTyxFQUFDLElBQUksRUFBRSxpQkFBaUIsRUFBNEIsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3hGLE9BQU8sS0FBSyxNQUFNLE1BQU0sUUFBUSxDQUFDOztNQUUzQixpQkFBaUIsR0FBRyxNQUFNO0FBR2hDLE1BQU0sT0FBTyxXQUFXOzs7OztJQVN0QixZQUFvQixLQUF3QixFQUFVLE1BQWM7UUFBaEQsVUFBSyxHQUFMLEtBQUssQ0FBbUI7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFRO0lBQ3BFLENBQUM7Ozs7OztJQUVELFNBQVMsQ0FBQyxLQUEyQixFQUFFLFVBQW9CO1FBQ3pELElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLEVBQUU7WUFDdEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3BDLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxjQUFjLEdBQUcsVUFBVSxDQUFDO1lBQ2pDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN4QyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDbkIsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ25CLElBQUksQ0FBQyxRQUFRLEdBQUcsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7U0FFaEY7YUFBTTtZQUNMLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNwQjtRQUVELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFD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RkYsSUFBSSxTQUFDLEVBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFDOzs7O1lBTHhCLGlCQUFpQjtZQUE0QixNQUFNOzs7O0lBTy9ELG1DQUFvQzs7SUFFcEMsK0JBQXlCOztJQUN6QixnQ0FBd0M7O0lBQ3hDLHFDQUFnQzs7SUFDaEMsaUNBQTRCOztJQUM1QiwrQkFBeUI7O0lBRWIsNEJBQWdDOztJQUFFLDZCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIG5neC1tb21lbnQgKGMpIDIwMTUsIDIwMTYgVXJpIFNoYWtlZCAvIE1JVCBMaWNlbmNlICovXG5cbmltcG9ydCB7UGlwZSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIFBpcGVUcmFuc2Zvcm0sIE9uRGVzdHJveSwgTmdab25lfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAqIGFzIG1vbWVudCBmcm9tICdtb21lbnQnO1xuXG5jb25zdCBtb21lbnRDb25zdHJ1Y3RvciA9IG1vbWVudDtcblxuQFBpcGUoe25hbWU6ICdhbVRpbWVBZ28nLCBwdXJlOiBmYWxzZX0pXG5leHBvcnQgY2xhc3MgVGltZUFnb1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtLCBPbkRlc3Ryb3kge1xuICBwcml2YXRlIGN1cnJlbnRUaW1lcjogbnVtYmVyIHwgbnVsbDtcblxuICBwcml2YXRlIGxhc3RUaW1lOiBOdW1iZXI7XG4gIHByaXZhdGUgbGFzdFZhbHVlOiBEYXRlIHwgbW9tZW50Lk1vbWVudDtcbiAgcHJpdmF0ZSBsYXN0T21pdFN1ZmZpeDogYm9vbGVhbjtcbiAgcHJpdmF0ZSBsYXN0TG9jYWxlPzogc3RyaW5nO1xuICBwcml2YXRlIGxhc3RUZXh0OiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjZFJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsIHByaXZhdGUgbmdab25lOiBOZ1pvbmUpIHtcbiAgfVxuXG4gIHRyYW5zZm9ybSh2YWx1ZTogRGF0ZSB8IG1vbWVudC5Nb21lbnQsIG9taXRTdWZmaXg/OiBib29sZWFuKTogc3RyaW5nIHtcbiAgICBpZiAodGhpcy5oYXNDaGFuZ2VkKHZhbHVlLCBvbWl0U3VmZml4KSkge1xuICAgICAgdGhpcy5sYXN0VGltZSA9IHRoaXMuZ2V0VGltZSh2YWx1ZSk7XG4gICAgICB0aGlzLmxhc3RWYWx1ZSA9IHZhbHVlO1xuICAgICAgdGhpcy5sYXN0T21pdFN1ZmZpeCA9IG9taXRTdWZmaXg7XG4gICAgICB0aGlzLmxhc3RMb2NhbGUgPSB0aGlzLmdldExvY2FsZSh2YWx1ZSk7XG4gICAgICB0aGlzLnJlbW92ZVRpbWVyKCk7XG4gICAgICB0aGlzLmNyZWF0ZVRpbWVyKCk7XG4gICAgICB0aGlzLmxhc3RUZXh0ID0gbW9tZW50Q29uc3RydWN0b3IodmFsdWUpLmZyb20obW9tZW50Q29uc3RydWN0b3IoKSwgb21pdFN1ZmZpeCk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jcmVhdGVUaW1lcigpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmxhc3RUZXh0O1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5yZW1vdmVUaW1lcigpO1xuICB9XG5cblxuICBwcml2YXRlIGNyZWF0ZVRpbWVyKCkge1xuICAgIGlmICh0aGlzLmN1cnJlbnRUaW1lcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBtb21lbnRJbnN0YW5jZSA9IG1vbWVudENvbnN0cnVjdG9yKHRoaXMubGFzdFZhbHVlKTtcblxuICAgIGNvbnN0IHRpbWVUb1VwZGF0ZSA9IHRoaXMuZ2V0U2Vjb25kc1VudGlsVXBkYXRlKG1vbWVudEluc3RhbmNlKSAqIDEwMDA7XG4gICAgdGhpcy5jdXJyZW50VGltZXIgPSB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aGlzLmxhc3RUZXh0ID0gbW9tZW50Q29uc3RydWN0b3IodGhpcy5sYXN0VmFsdWUpLmZyb20obW9tZW50Q29uc3RydWN0b3IoKSwgdGhpcy5sYXN0T21pdFN1ZmZpeCk7XG5cbiAgICAgICAgICB0aGlzLmN1cnJlbnRUaW1lciA9IG51bGw7XG4gICAgICAgICAgdGhpcy5uZ1pvbmUucnVuKCgpID0+IHRoaXMuY2RSZWYubWFya0ZvckNoZWNrKCkpO1xuICAgICAgICB9LCB0aW1lVG9VcGRhdGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuXG4gIHByaXZhdGUgcmVtb3ZlVGltZXIoKSB7XG4gICAgaWYgKHRoaXMuY3VycmVudFRpbWVyKSB7XG4gICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMuY3VycmVudFRpbWVyKTtcbiAgICAgIHRoaXMuY3VycmVudFRpbWVyID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldFNlY29uZHNVbnRpbFVwZGF0ZShtb21lbnRJbnN0YW5jZTogbW9tZW50Lk1vbWVudCkge1xuICAgIGNvbnN0IGhvd09sZCA9IE1hdGguYWJzKG1vbWVudENvbnN0cnVjdG9yKCkuZGlmZihtb21lbnRJbnN0YW5jZSwgJ21pbnV0ZScpKTtcbiAgICBpZiAoaG93T2xkIDwgMSkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChob3dPbGQgPCA2MCkge1xuICAgICAgcmV0dXJuIDMwO1xuICAgIH0gZWxzZSBpZiAoaG93T2xkIDwgMTgwKSB7XG4gICAgICByZXR1cm4gMzAwO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMzYwMDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGhhc0NoYW5nZWQodmFsdWU6IERhdGUgfCBtb21lbnQuTW9tZW50LCBvbWl0U3VmZml4PzogYm9vbGVhbikge1xuICAgIHJldHVybiB0aGlzLmdldFRpbWUodmFsdWUpICE9PSB0aGlzLmxhc3RUaW1lXG4gICAgICB8fCB0aGlzLmdldExvY2FsZSh2YWx1ZSkgIT09IHRoaXMubGFzdExvY2FsZVxuICAgICAgfHwgb21pdFN1ZmZpeCAhPT0gdGhpcy5sYXN0T21pdFN1ZmZpeDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0VGltZSh2YWx1ZTogRGF0ZSB8IG1vbWVudC5Nb21lbnQpIHtcbiAgICBpZiAobW9tZW50LmlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZS5nZXRUaW1lKCk7XG4gICAgfSBlbHNlIGlmIChtb21lbnQuaXNNb21lbnQodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdmFsdWUudmFsdWVPZigpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbW9tZW50Q29uc3RydWN0b3IodmFsdWUpLnZhbHVlT2YoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldExvY2FsZSh2YWx1ZTogRGF0ZSB8IG1vbWVudC5Nb21lbnQpOiBzdHJpbmcge1xuICAgIHJldHVybiBtb21lbnQuaXNNb21lbnQodmFsdWUpID8gdmFsdWUubG9jYWxlKCkgOiBudWxsO1xuICB9XG59XG4iXX0=