/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */
import { Pipe, ChangeDetectorRef, NgZone } from '@angular/core';
import * as moment from 'moment';
/** @type {?} */
var momentConstructor = moment;
var TimeAgoPipe = /** @class */ (function () {
    function TimeAgoPipe(cdRef, ngZone) {
        this.cdRef = cdRef;
        this.ngZone = ngZone;
    }
    /**
     * @param {?} value
     * @param {?=} omitSuffix
     * @return {?}
     */
    TimeAgoPipe.prototype.transform = /**
     * @param {?} value
     * @param {?=} omitSuffix
     * @return {?}
     */
    function (value, omitSuffix) {
        if (this.hasChanged(value, omitSuffix)) {
            this.lastTime = this.getTime(value);
            this.lastValue = value;
            this.lastOmitSuffix = omitSuffix;
            this.lastLocale = this.getLocale(value);
            this.removeTimer();
            this.createTimer();
            this.lastText = momentConstructor(value).from(momentConstructor(), omitSuffix);
        }
        else {
            this.createTimer();
        }
        return this.lastText;
    };
    /**
     * @return {?}
     */
    TimeAgoPipe.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeTimer();
    };
    /**
     * @return {?}
     */
    TimeAgoPipe.prototype.createTimer = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.currentTimer) {
            return;
        }
        /** @type {?} */
        var momentInstance = momentConstructor(this.lastValue);
        /** @type {?} */
        var timeToUpdate = this.getSecondsUntilUpdate(momentInstance) * 1000;
        this.currentTimer = this.ngZone.runOutsideAngular(function () {
            if (typeof window !== 'undefined') {
                return window.setTimeout(function () {
                    _this.lastText = momentConstructor(_this.lastValue).from(momentConstructor(), _this.lastOmitSuffix);
                    _this.currentTimer = null;
                    _this.ngZone.run(function () { return _this.cdRef.markForCheck(); });
                }, timeToUpdate);
            }
            else {
                return null;
            }
        });
    };
    /**
     * @return {?}
     */
    TimeAgoPipe.prototype.removeTimer = /**
     * @return {?}
     */
    function () {
        if (this.currentTimer) {
            window.clearTimeout(this.currentTimer);
            this.currentTimer = null;
        }
    };
    /**
     * @param {?} momentInstance
     * @return {?}
     */
    TimeAgoPipe.prototype.getSecondsUntilUpdate = /**
     * @param {?} momentInstance
     * @return {?}
     */
    function (momentInstance) {
        /** @type {?} */
        var howOld = Math.abs(momentConstructor().diff(momentInstance, 'minute'));
        if (howOld < 1) {
            return 1;
        }
        else if (howOld < 60) {
            return 30;
        }
        else if (howOld < 180) {
            return 300;
        }
        else {
            return 3600;
        }
    };
    /**
     * @param {?} value
     * @param {?=} omitSuffix
     * @return {?}
     */
    TimeAgoPipe.prototype.hasChanged = /**
     * @param {?} value
     * @param {?=} omitSuffix
     * @return {?}
     */
    function (value, omitSuffix) {
        return this.getTime(value) !== this.lastTime
            || this.getLocale(value) !== this.lastLocale
            || omitSuffix !== this.lastOmitSuffix;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    TimeAgoPipe.prototype.getTime = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (moment.isDate(value)) {
            return value.getTime();
        }
        else if (moment.isMoment(value)) {
            return value.valueOf();
        }
        else {
            return momentConstructor(value).valueOf();
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    TimeAgoPipe.prototype.getLocale = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return moment.isMoment(value) ? value.locale() : null;
    };
    TimeAgoPipe.decorators = [
        { type: Pipe, args: [{ name: 'amTimeAgo', pure: false },] }
    ];
    /** @nocollapse */
    TimeAgoPipe.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: NgZone }
    ]; };
    return TimeAgoPipe;
}());
export { TimeAgoPipe };
if (false) {
    /** @type {?} */
    TimeAgoPipe.prototype.currentTimer;
    /** @type {?} */
    TimeAgoPipe.prototype.lastTime;
    /** @type {?} */
    TimeAgoPipe.prototype.lastValue;
    /** @type {?} */
    TimeAgoPipe.prototype.lastOmitSuffix;
    /** @type {?} */
    TimeAgoPipe.prototype.lastLocale;
    /** @type {?} */
    TimeAgoPipe.prototype.lastText;
    /** @type {?} */
    TimeAgoPipe.prototype.cdRef;
    /** @type {?} */
    TimeAgoPipe.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1hZ28ucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1tb21lbnQvIiwic291cmNlcyI6WyJ0aW1lLWFnby5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsT0FBTyxFQUFDLElBQUksRUFBRSxpQkFBaUIsRUFBNEIsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3hGLE9BQU8sS0FBSyxNQUFNLE1BQU0sUUFBUSxDQUFDOztJQUUzQixpQkFBaUIsR0FBRyxNQUFNO0FBRWhDO0lBVUUscUJBQW9CLEtBQXdCLEVBQVUsTUFBYztRQUFoRCxVQUFLLEdBQUwsS0FBSyxDQUFtQjtRQUFVLFdBQU0sR0FBTixNQUFNLENBQVE7SUFDcEUsQ0FBQzs7Ozs7O0lBRUQsK0JBQVM7Ozs7O0lBQVQsVUFBVSxLQUEyQixFQUFFLFVBQW9CO1FBQ3pELElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLEVBQUU7WUFDdEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3BDLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxjQUFjLEdBQUcsVUFBVSxDQUFDO1lBQ2pDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN4QyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDbkIsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ25CLElBQUksQ0FBQyxRQUFRLEdBQUcsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7U0FFaEY7YUFBTTtZQUNMLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNwQjtRQUVELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDOzs7O0lBRUQs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SyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDeEQsQ0FBQzs7Z0JBL0ZGLElBQUksU0FBQyxFQUFDLElBQUksRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBQzs7OztnQkFMeEIsaUJBQWlCO2dCQUE0QixNQUFNOztJQXFHakUsa0JBQUM7Q0FBQSxBQWhHRCxJQWdHQztTQS9GWSxXQUFXOzs7SUFDdEIsbUNBQW9DOztJQUVwQywrQkFBeUI7O0lBQ3pCLGdDQUF3Qzs7SUFDeEMscUNBQWdDOztJQUNoQyxpQ0FBNEI7O0lBQzVCLCtCQUF5Qjs7SUFFYiw0QkFBZ0M7O0lBQUUsNkJBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiLyogbmd4LW1vbWVudCAoYykgMjAxNSwgMjAxNiBVcmkgU2hha2VkIC8gTUlUIExpY2VuY2UgKi9cblxuaW1wb3J0IHtQaXBlLCBDaGFuZ2VEZXRlY3RvclJlZiwgUGlwZVRyYW5zZm9ybSwgT25EZXN0cm95LCBOZ1pvbmV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgbW9tZW50IGZyb20gJ21vbWVudCc7XG5cbmNvbnN0IG1vbWVudENvbnN0cnVjdG9yID0gbW9tZW50O1xuXG5AUGlwZSh7bmFtZTogJ2FtVGltZUFnbycsIHB1cmU6IGZhbHNlfSlcbmV4cG9ydCBjbGFzcyBUaW1lQWdvUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0sIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgY3VycmVudFRpbWVyOiBudW1iZXIgfCBudWxsO1xuXG4gIHByaXZhdGUgbGFzdFRpbWU6IE51bWJlcjtcbiAgcHJpdmF0ZSBsYXN0VmFsdWU6IERhdGUgfCBtb21lbnQuTW9tZW50O1xuICBwcml2YXRlIGxhc3RPbWl0U3VmZml4OiBib29sZWFuO1xuICBwcml2YXRlIGxhc3RMb2NhbGU/OiBzdHJpbmc7XG4gIHByaXZhdGUgbGFzdFRleHQ6IHN0cmluZztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNkUmVmOiBDaGFuZ2VEZXRlY3RvclJlZiwgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSkge1xuICB9XG5cbiAgdHJhbnNmb3JtKHZhbHVlOiBEYXRlIHwgbW9tZW50Lk1vbWVudCwgb21pdFN1ZmZpeD86IGJvb2xlYW4pOiBzdHJpbmcge1xuICAgIGlmICh0aGlzLmhhc0NoYW5nZWQodmFsdWUsIG9taXRTdWZmaXgpKSB7XG4gICAgICB0aGlzLmxhc3RUaW1lID0gdGhpcy5nZXRUaW1lKHZhbHVlKTtcbiAgICAgIHRoaXMubGFzdFZhbHVlID0gdmFsdWU7XG4gICAgICB0aGlzLmxhc3RPbWl0U3VmZml4ID0gb21pdFN1ZmZpeDtcbiAgICAgIHRoaXMubGFzdExvY2FsZSA9IHRoaXMuZ2V0TG9jYWxlKHZhbHVlKTtcbiAgICAgIHRoaXMucmVtb3ZlVGltZXIoKTtcbiAgICAgIHRoaXMuY3JlYXRlVGltZXIoKTtcbiAgICAgIHRoaXMubGFzdFRleHQgPSBtb21lbnRDb25zdHJ1Y3Rvcih2YWx1ZSkuZnJvbShtb21lbnRDb25zdHJ1Y3RvcigpLCBvbWl0U3VmZml4KTtcblxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNyZWF0ZVRpbWVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubGFzdFRleHQ7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLnJlbW92ZVRpbWVyKCk7XG4gIH1cblxuXG4gIHByaXZhdGUgY3JlYXRlVGltZXIoKSB7XG4gICAgaWYgKHRoaXMuY3VycmVudFRpbWVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG1vbWVudEluc3RhbmNlID0gbW9tZW50Q29uc3RydWN0b3IodGhpcy5sYXN0VmFsdWUpO1xuXG4gICAgY29uc3QgdGltZVRvVXBkYXRlID0gdGhpcy5nZXRTZWNvbmRzVW50aWxVcGRhdGUobW9tZW50SW5zdGFuY2UpICogMTAwMDtcbiAgICB0aGlzLmN1cnJlbnRUaW1lciA9IHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMubGFzdFRleHQgPSBtb21lbnRDb25zdHJ1Y3Rvcih0aGlzLmxhc3RWYWx1ZSkuZnJvbShtb21lbnRDb25zdHJ1Y3RvcigpLCB0aGlzLmxhc3RPbWl0U3VmZml4KTtcblxuICAgICAgICAgIHRoaXMuY3VycmVudFRpbWVyID0gbnVsbDtcbiAgICAgICAgICB0aGlzLm5nWm9uZS5ydW4oKCkgPT4gdGhpcy5jZFJlZi5tYXJrRm9yQ2hlY2soKSk7XG4gICAgICAgIH0sIHRpbWVUb1VwZGF0ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG5cbiAgcHJpdmF0ZSByZW1vdmVUaW1lcigpIHtcbiAgICBpZiAodGhpcy5jdXJyZW50VGltZXIpIHtcbiAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5jdXJyZW50VGltZXIpO1xuICAgICAgdGhpcy5jdXJyZW50VGltZXIgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0U2Vjb25kc1VudGlsVXBkYXRlKG1vbWVudEluc3RhbmNlOiBtb21lbnQuTW9tZW50KSB7XG4gICAgY29uc3QgaG93T2xkID0gTWF0aC5hYnMobW9tZW50Q29uc3RydWN0b3IoKS5kaWZmKG1vbWVudEluc3RhbmNlLCAnbWludXRlJykpO1xuICAgIGlmIChob3dPbGQgPCAxKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2UgaWYgKGhvd09sZCA8IDYwKSB7XG4gICAgICByZXR1cm4gMzA7XG4gICAgfSBlbHNlIGlmIChob3dPbGQgPCAxODApIHtcbiAgICAgIHJldHVybiAzMDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAzNjAwO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaGFzQ2hhbmdlZCh2YWx1ZTogRGF0ZSB8IG1vbWVudC5Nb21lbnQsIG9taXRTdWZmaXg/OiBib29sZWFuKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VGltZSh2YWx1ZSkgIT09IHRoaXMubGFzdFRpbWVcbiAgICAgIHx8IHRoaXMuZ2V0TG9jYWxlKHZhbHVlKSAhPT0gdGhpcy5sYXN0TG9jYWxlXG4gICAgICB8fCBvbWl0U3VmZml4ICE9PSB0aGlzLmxhc3RPbWl0U3VmZml4O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRUaW1lKHZhbHVlOiBEYXRlIHwgbW9tZW50Lk1vbWVudCkge1xuICAgIGlmIChtb21lbnQuaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlLmdldFRpbWUoKTtcbiAgICB9IGVsc2UgaWYgKG1vbWVudC5pc01vbWVudCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZS52YWx1ZU9mKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBtb21lbnRDb25zdHJ1Y3Rvcih2YWx1ZSkudmFsdWVPZigpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0TG9jYWxlKHZhbHVlOiBEYXRlIHwgbW9tZW50Lk1vbWVudCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIG1vbWVudC5pc01vbWVudCh2YWx1ZSkgPyB2YWx1ZS5sb2NhbGUoKSA6IG51bGw7XG4gIH1cbn1cbiJdfQ==