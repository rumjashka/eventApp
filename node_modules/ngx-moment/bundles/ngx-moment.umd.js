(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('moment')) :
    typeof define === 'function' && define.amd ? define('ngx-moment', ['exports', '@angular/core', 'moment'], factory) :
    (factory((global['ngx-moment'] = {}),global.ng.core,global.moment));
}(this, (function (exports,core,moment) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var momentConstructor = moment;
    var AddPipe = /** @class */ (function () {
        function AddPipe() {
        }
        /**
         * @param {?} value
         * @param {?} amount
         * @param {?=} unit
         * @return {?}
         */
        AddPipe.prototype.transform = /**
         * @param {?} value
         * @param {?} amount
         * @param {?=} unit
         * @return {?}
         */
            function (value, amount, unit) {
                if (typeof amount === 'undefined' || (typeof amount === 'number' && typeof unit === 'undefined')) {
                    throw new Error('AddPipe: missing required arguments');
                }
                return momentConstructor(value).add(amount, unit);
            };
        AddPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'amAdd' },] }
        ];
        return AddPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var momentConstructor$1 = moment;
    var CalendarPipe = /** @class */ (function () {
        function CalendarPipe(cdRef, ngZone) {
            var _this = this;
            this.cdRef = cdRef;
            this.ngZone = ngZone;
            // using a single static timer for all instances of this pipe for performance reasons
            CalendarPipe.initTimer(ngZone);
            CalendarPipe.refs++;
            // values such as Today will need to be replaced with Yesterday after midnight,
            // so make sure we subscribe to an EventEmitter that we set up to emit at midnight
            this.midnightSub = CalendarPipe.midnight.subscribe(function () {
                _this.ngZone.run(function () { return _this.cdRef.markForCheck(); });
            });
        }
        /**
         * @param {?} value
         * @param {...?} args
         * @return {?}
         */
        CalendarPipe.prototype.transform = /**
         * @param {?} value
         * @param {...?} args
         * @return {?}
         */
            function (value) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                /** @type {?} */
                var formats = null;
                /** @type {?} */
                var referenceTime = null;
                for (var i = 0, len = args.length; i < len; i++) {
                    if (args[i] !== null) {
                        if (typeof args[i] === 'object' && !moment.isMoment(args[i])) {
                            formats = args[i];
                        }
                        else {
                            referenceTime = momentConstructor$1(args[i]);
                        }
                    }
                }
                return momentConstructor$1(value).calendar(referenceTime, formats);
            };
        /**
         * @return {?}
         */
        CalendarPipe.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (CalendarPipe.refs > 0) {
                    CalendarPipe.refs--;
                }
                if (CalendarPipe.refs === 0) {
                    CalendarPipe.removeTimer();
                }
                this.midnightSub.unsubscribe();
            };
        /**
         * @param {?} ngZone
         * @return {?}
         */
        CalendarPipe.initTimer = /**
         * @param {?} ngZone
         * @return {?}
         */
            function (ngZone) {
                // initialize the timer
                if (!CalendarPipe.midnight) {
                    CalendarPipe.midnight = new core.EventEmitter();
                    if (typeof window !== 'undefined') {
                        /** @type {?} */
                        var timeToUpdate_1 = CalendarPipe._getMillisecondsUntilUpdate();
                        CalendarPipe.timer = ngZone.runOutsideAngular(function () {
                            return window.setTimeout(function () {
                                // emit the current date
                                CalendarPipe.midnight.emit(new Date());
                                // refresh the timer
                                CalendarPipe.removeTimer();
                                CalendarPipe.initTimer(ngZone);
                            }, timeToUpdate_1);
                        });
                    }
                }
            };
        /**
         * @return {?}
         */
        CalendarPipe.removeTimer = /**
         * @return {?}
         */
            function () {
                if (CalendarPipe.timer) {
                    window.clearTimeout(CalendarPipe.timer);
                    CalendarPipe.timer = null;
                    CalendarPipe.midnight = null;
                }
            };
        /**
         * @return {?}
         */
        CalendarPipe._getMillisecondsUntilUpdate = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var now = momentConstructor$1();
                /** @type {?} */
                var tomorrow = momentConstructor$1().startOf('day').add(1, 'days');
                /** @type {?} */
                var timeToMidnight = tomorrow.valueOf() - now.valueOf();
                return timeToMidnight + 1000; // 1 second after midnight
            };
        /**
         * Internal reference counter, so we can clean up when no instances are in use
         */
        CalendarPipe.refs = 0;
        CalendarPipe.timer = null;
        CalendarPipe.midnight = null;
        CalendarPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'amCalendar', pure: false },] }
        ];
        /** @nocollapse */
        CalendarPipe.ctorParameters = function () {
            return [
                { type: core.ChangeDetectorRef },
                { type: core.NgZone }
            ];
        };
        return CalendarPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var momentConstructor$2 = moment;
    var DateFormatPipe = /** @class */ (function () {
        function DateFormatPipe() {
        }
        /**
         * @param {?} value
         * @param {...?} args
         * @return {?}
         */
        DateFormatPipe.prototype.transform = /**
         * @param {?} value
         * @param {...?} args
         * @return {?}
         */
            function (value) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                if (!value) {
                    return '';
                }
                return momentConstructor$2(value).format(args[0]);
            };
        DateFormatPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'amDateFormat' },] }
        ];
        return DateFormatPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var momentConstructor$3 = moment;
    var DifferencePipe = /** @class */ (function () {
        function DifferencePipe() {
        }
        /**
         * @param {?} value
         * @param {?} otherValue
         * @param {?=} unit
         * @param {?=} precision
         * @return {?}
         */
        DifferencePipe.prototype.transform = /**
         * @param {?} value
         * @param {?} otherValue
         * @param {?=} unit
         * @param {?=} precision
         * @return {?}
         */
            function (value, otherValue, unit, precision) {
                /** @type {?} */
                var date = momentConstructor$3(value);
                /** @type {?} */
                var date2 = (otherValue !== null) ? momentConstructor$3(otherValue) : momentConstructor$3();
                return date.diff(date2, unit, precision);
            };
        DifferencePipe.decorators = [
            { type: core.Pipe, args: [{ name: 'amDifference' },] }
        ];
        return DifferencePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var DurationPipe = /** @class */ (function () {
        function DurationPipe() {
        }
        /**
         * @param {?} value
         * @param {...?} args
         * @return {?}
         */
        DurationPipe.prototype.transform = /**
         * @param {?} value
         * @param {...?} args
         * @return {?}
         */
            function (value) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                if (typeof args === 'undefined' || args.length !== 1) {
                    throw new Error('DurationPipe: missing required time unit argument');
                }
                return moment.duration(value, ( /** @type {?} */(args[0]))).humanize();
            };
        DurationPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'amDuration' },] }
        ];
        return DurationPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var FromUnixPipe = /** @class */ (function () {
        function FromUnixPipe() {
        }
        /**
         * @param {?} value
         * @param {...?} args
         * @return {?}
         */
        FromUnixPipe.prototype.transform = /**
         * @param {?} value
         * @param {...?} args
         * @return {?}
         */
            function (value) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                if (typeof value === 'string') {
                    value = +value;
                }
                return moment.unix(value);
            };
        FromUnixPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'amFromUnix' },] }
        ];
        return FromUnixPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var momentConstructor$4 = moment;
    var ParsePipe = /** @class */ (function () {
        function ParsePipe() {
        }
        /**
         * @param {?} value
         * @param {?} format
         * @return {?}
         */
        ParsePipe.prototype.transform = /**
         * @param {?} value
         * @param {?} format
         * @return {?}
         */
            function (value, format) {
                return momentConstructor$4(value, format);
            };
        ParsePipe.decorators = [
            { type: core.Pipe, args: [{ name: 'amParse' },] }
        ];
        return ParsePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var momentConstructor$5 = moment;
    var SubtractPipe = /** @class */ (function () {
        function SubtractPipe() {
        }
        /**
         * @param {?} value
         * @param {?} amount
         * @param {?=} unit
         * @return {?}
         */
        SubtractPipe.prototype.transform = /**
         * @param {?} value
         * @param {?} amount
         * @param {?=} unit
         * @return {?}
         */
            function (value, amount, unit) {
                if (typeof amount === 'undefined' || (typeof amount === 'number' && typeof unit === 'undefined')) {
                    throw new Error('SubtractPipe: missing required arguments');
                }
                return momentConstructor$5(value).subtract(amount, unit);
            };
        SubtractPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'amSubtract' },] }
        ];
        return SubtractPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var momentConstructor$6 = moment;
    var TimeAgoPipe = /** @class */ (function () {
        function TimeAgoPipe(cdRef, ngZone) {
            this.cdRef = cdRef;
            this.ngZone = ngZone;
        }
        /**
         * @param {?} value
         * @param {?=} omitSuffix
         * @return {?}
         */
        TimeAgoPipe.prototype.transform = /**
         * @param {?} value
         * @param {?=} omitSuffix
         * @return {?}
         */
            function (value, omitSuffix) {
                if (this.hasChanged(value, omitSuffix)) {
                    this.lastTime = this.getTime(value);
                    this.lastValue = value;
                    this.lastOmitSuffix = omitSuffix;
                    this.lastLocale = this.getLocale(value);
                    this.removeTimer();
                    this.createTimer();
                    this.lastText = momentConstructor$6(value).from(momentConstructor$6(), omitSuffix);
                }
                else {
                    this.createTimer();
                }
                return this.lastText;
            };
        /**
         * @return {?}
         */
        TimeAgoPipe.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.removeTimer();
            };
        /**
         * @return {?}
         */
        TimeAgoPipe.prototype.createTimer = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.currentTimer) {
                    return;
                }
                /** @type {?} */
                var momentInstance = momentConstructor$6(this.lastValue);
                /** @type {?} */
                var timeToUpdate = this.getSecondsUntilUpdate(momentInstance) * 1000;
                this.currentTimer = this.ngZone.runOutsideAngular(function () {
                    if (typeof window !== 'undefined') {
                        return window.setTimeout(function () {
                            _this.lastText = momentConstructor$6(_this.lastValue).from(momentConstructor$6(), _this.lastOmitSuffix);
                            _this.currentTimer = null;
                            _this.ngZone.run(function () { return _this.cdRef.markForCheck(); });
                        }, timeToUpdate);
                    }
                    else {
                        return null;
                    }
                });
            };
        /**
         * @return {?}
         */
        TimeAgoPipe.prototype.removeTimer = /**
         * @return {?}
         */
            function () {
                if (this.currentTimer) {
                    window.clearTimeout(this.currentTimer);
                    this.currentTimer = null;
                }
            };
        /**
         * @param {?} momentInstance
         * @return {?}
         */
        TimeAgoPipe.prototype.getSecondsUntilUpdate = /**
         * @param {?} momentInstance
         * @return {?}
         */
            function (momentInstance) {
                /** @type {?} */
                var howOld = Math.abs(momentConstructor$6().diff(momentInstance, 'minute'));
                if (howOld < 1) {
                    return 1;
                }
                else if (howOld < 60) {
                    return 30;
                }
                else if (howOld < 180) {
                    return 300;
                }
                else {
                    return 3600;
                }
            };
        /**
         * @param {?} value
         * @param {?=} omitSuffix
         * @return {?}
         */
        TimeAgoPipe.prototype.hasChanged = /**
         * @param {?} value
         * @param {?=} omitSuffix
         * @return {?}
         */
            function (value, omitSuffix) {
                return this.getTime(value) !== this.lastTime
                    || this.getLocale(value) !== this.lastLocale
                    || omitSuffix !== this.lastOmitSuffix;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        TimeAgoPipe.prototype.getTime = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (moment.isDate(value)) {
                    return value.getTime();
                }
                else if (moment.isMoment(value)) {
                    return value.valueOf();
                }
                else {
                    return momentConstructor$6(value).valueOf();
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        TimeAgoPipe.prototype.getLocale = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return moment.isMoment(value) ? value.locale() : null;
            };
        TimeAgoPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'amTimeAgo', pure: false },] }
        ];
        /** @nocollapse */
        TimeAgoPipe.ctorParameters = function () {
            return [
                { type: core.ChangeDetectorRef },
                { type: core.NgZone }
            ];
        };
        return TimeAgoPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var momentConstructor$7 = moment;
    var UtcPipe = /** @class */ (function () {
        function UtcPipe() {
        }
        /**
         * @param {?} value
         * @return {?}
         */
        UtcPipe.prototype.transform = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return momentConstructor$7(value).utc();
            };
        UtcPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'amUtc' },] }
        ];
        return UtcPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var FromUtcPipe = /** @class */ (function () {
        function FromUtcPipe() {
        }
        /**
         * @param {?} value
         * @param {...?} args
         * @return {?}
         */
        FromUtcPipe.prototype.transform = /**
         * @param {?} value
         * @param {...?} args
         * @return {?}
         */
            function (value) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                return moment.utc(value);
            };
        FromUtcPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'amFromUtc' },] }
        ];
        return FromUtcPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var momentConstructor$8 = moment;
    var LocalTimePipe = /** @class */ (function () {
        function LocalTimePipe() {
        }
        /**
         * @param {?} value
         * @return {?}
         */
        LocalTimePipe.prototype.transform = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return momentConstructor$8(value).local();
            };
        LocalTimePipe.decorators = [
            { type: core.Pipe, args: [{ name: 'amLocal' },] }
        ];
        return LocalTimePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    // under systemjs, moment is actually exported as the default export, so we account for that
    /** @type {?} */
    var momentConstructor$9 = moment;
    var LocalePipe = /** @class */ (function () {
        function LocalePipe() {
        }
        /**
         * @param {?} value
         * @param {?} locale
         * @return {?}
         */
        LocalePipe.prototype.transform = /**
         * @param {?} value
         * @param {?} locale
         * @return {?}
         */
            function (value, locale) {
                return momentConstructor$9(value).locale(locale);
            };
        LocalePipe.decorators = [
            { type: core.Pipe, args: [{ name: 'amLocale' },] }
        ];
        return LocalePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var ParseZonePipe = /** @class */ (function () {
        function ParseZonePipe() {
        }
        /**
         * @param {?} value
         * @return {?}
         */
        ParseZonePipe.prototype.transform = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return moment.parseZone(value);
            };
        ParseZonePipe.decorators = [
            { type: core.Pipe, args: [{ name: 'amParseZone' },] }
        ];
        return ParseZonePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var ANGULAR_MOMENT_PIPES = [
        AddPipe,
        CalendarPipe,
        DateFormatPipe,
        DifferencePipe,
        DurationPipe,
        FromUnixPipe,
        ParsePipe,
        SubtractPipe,
        TimeAgoPipe,
        UtcPipe,
        FromUtcPipe,
        LocalTimePipe,
        LocalePipe,
        ParseZonePipe
    ];
    var MomentModule = /** @class */ (function () {
        function MomentModule() {
        }
        MomentModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: ANGULAR_MOMENT_PIPES,
                        exports: ANGULAR_MOMENT_PIPES
                    },] }
        ];
        return MomentModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    exports.AddPipe = AddPipe;
    exports.CalendarPipe = CalendarPipe;
    exports.DateFormatPipe = DateFormatPipe;
    exports.DifferencePipe = DifferencePipe;
    exports.DurationPipe = DurationPipe;
    exports.FromUnixPipe = FromUnixPipe;
    exports.ParsePipe = ParsePipe;
    exports.MomentModule = MomentModule;
    exports.SubtractPipe = SubtractPipe;
    exports.TimeAgoPipe = TimeAgoPipe;
    exports.UtcPipe = UtcPipe;
    exports.FromUtcPipe = FromUtcPipe;
    exports.LocalTimePipe = LocalTimePipe;
    exports.LocalePipe = LocalePipe;
    exports.ParseZonePipe = ParseZonePipe;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,